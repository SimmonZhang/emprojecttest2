<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo1.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.example.demo1.model.User">
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="user_pwd" jdbcType="VARCHAR" property="userPwd" />
    <result column="user_nickname" jdbcType="VARCHAR" property="userNickname" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="delete_status" jdbcType="VARCHAR" property="deleteStatus" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user_id, user_name, user_pwd, user_nickname, create_time, update_time, delete_status
  </sql>
  <select id="selectByExample" parameterType="com.example.demo1.model.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from tb_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer"  resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_user
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <select id="selectByName" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tb_user
    where user_name = #{userName}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.demo1.model.User">
    insert into tb_user (user_id, user_name, user_pwd, 
      user_nickname, create_time, update_time, 
      delete_status)
    values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{userPwd,jdbcType=VARCHAR}, 
      #{userNickname,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{deleteStatus,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo1.model.User">
    insert into tb_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="userPwd != null">
        user_pwd,
      </if>
      <if test="userNickname != null">
        user_nickname,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="deleteStatus != null">
        delete_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPwd != null">
        #{userPwd,jdbcType=VARCHAR},
      </if>
      <if test="userNickname != null">
        #{userNickname,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleteStatus != null">
        #{deleteStatus,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo1.model.User">
    update tb_user
    <set>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPwd != null">
        user_pwd = #{userPwd,jdbcType=VARCHAR},
      </if>
      <if test="userNickname != null">
        user_nickname = #{userNickname,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleteStatus != null">
        delete_status = #{deleteStatus,jdbcType=VARCHAR},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo1.model.User">
    update tb_user
    set user_name = #{userName,jdbcType=VARCHAR},
      user_pwd = #{userPwd,jdbcType=VARCHAR},
      user_nickname = #{userNickname,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      delete_status = #{deleteStatus,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>

  <resultMap id="roleMap" type="com.example.demo1.model.One2Many">
    <id column="roleId" property="roleId"/>
    <result column="roleName" property="roleName"/>
    <collection property="users" ofType="com.alibaba.fastjson.JSONObject">
      <id column="userId" property="userId"/>
      <result column="nickname" property="nickname"/>
    </collection>
    <collection property="menus" ofType="com.example.demo1.model.One2Many">
      <id column="menuCode" property="menuCode"/>
      <result column="menuName" property="menuName"/>
      <collection property="permissions" ofType="com.alibaba.fastjson.JSONObject">
        <id column="permissionId" property="permissionId"/>
        <result column="permissionName" property="permissionName"/>
      </collection>
    </collection>
  </resultMap>
  <select id="listRole" resultMap="roleMap">
    SELECT r.role_id              roleId,
           r.role_name       roleName,
           u.user_id              userId,
           u.user_nickname          nickname,
           p.pm_id              permissionId,
           p.menu_code       menuCode,
           p.menu_name       menuName,
           p.pm_name permissionName
    FROM tb_role r
           LEFT JOIN tb_user_role ur on ur.ur_r_id = r.role_id
           LEFT JOIN tb_user u ON u.user_id = ur.ur_u_id AND u.delete_status = '1'
           LEFT JOIN tb_role_pm rp ON r.role_id = rp.rp_r_id AND rp.delete_status = '1'
           LEFT JOIN tb_permission p ON rp.rp_p_id = p.pm_id
    WHERE r.delete_status = '1'
    ORDER BY r.role_id, p.pm_id
  </select>

  <resultMap id="aRole" type="com.example.demo1.model.One2Many">
    <id column="roleId" property="roleId"/>
    <result column="roleName" property="roleName"/>
    <collection property="users" ofType="com.alibaba.fastjson.JSONObject">
      <id column="userId" property="userId"/>
    </collection>
    <collection property="permissionIds" ofType="Integer">
      <id column="permissionId" property="permissionId"/>
    </collection>
  </resultMap>
  <select id="getRoleAllInfo" resultMap="aRole">
    SELECT r.role_id        roleId,
           r.role_name roleName,
           ur.ur_u_id  userId,
           p.pm_id        permissionId
    FROM tb_role r
           LEFT JOIN tb_user_role ur ON r.role_id = ur.ur_r_id
           LEFT JOIN tb_role_pm rp ON r.role_id = rp.rp_r_id AND rp.delete_status = '1'
           LEFT JOIN tb_permission p ON rp.rp_p_id = p.pm_id
    WHERE r.role_id = #{roleId}
  </select>

  <update id="uRemoveOldPermission">
    UPDATE tb_role_pm
    SET
    delete_status = '2'
    WHERE rp_r_id = #{roleId}
    AND rp_p_id in (
    <foreach collection="permissions" item="item" index="index" separator=",">
      #{item}
    </foreach>
    )
  </update>

  <update id="uInsertNewPermission">
    UPDATE tb_role_pm
    SET
    delete_status = '1'
    WHERE rp_r_id = #{roleId}
    AND rp_p_id in (
    <foreach collection="permissions" item="item" index="index" separator=",">
      #{item}
    </foreach>
    )
  </update>

  <update id="updateRoleName">
    UPDATE tb_role
    SET role_name = #{roleName}
    WHERE role_id = #{roleId}
  </update>

  <update id="removeRole">
    UPDATE tb_role
    SET delete_status = '2'
    WHERE role_id = #{roleId}
      and role_id != 1
  </update>

  <update id="removeRoleAllPermission">
    UPDATE tb_role_pm
    SET delete_status = '2'
    WHERE rp_r_id = #{roleId}
  </update>

  <insert id="insertRole" useGeneratedKeys="true" keyProperty="roleId">
    INSERT INTO tb_role
      (role_name)
    VALUES (#{roleName})
  </insert>

  <insert id="insertRolePermission">
    insert into tb_role_pm (rp_r_id, rp_p_id)
    values
    <foreach collection="permissions" item="item" index="index" separator=",">
      (#{roleId}, #{item})
    </foreach>
  </insert>

  <resultMap id="userMap" type="com.example.demo1.model.One2Many">
    <id column="userId" property="userId"/>
    <result column="username" property="username"/>
    <result column="nickname" property="nickname"/>
    <result column="createTime" property="createTime"/>
    <result column="updateTime" property="updateTime"/>
    <result column="deleteStatus" property="deleteStatus"/>
    <collection property="roles" ofType="com.alibaba.fastjson.JSONObject">
      <id column="roleId" property="roleId"/>
      <result column="roleName" property="roleName"/>
    </collection>
  </resultMap>
  <select id="listUser" resultMap="userMap">
    SELECT u.*,
           r.role_id        roleId,
           r.role_name roleName
    FROM (
           SELECT user_id                                      userId,
                  user_name                                username,
                  user_nickname                                nickname,
                  delete_status                           deleteStatus,
                  DATE_FORMAT(create_time, '%Y.%m.%d %T') createTime,
                  DATE_FORMAT(update_time, '%Y.%m.%d %T') updateTime
           FROM tb_user
           WHERE delete_status = '1'
           ORDER BY user_id
         ) u
           LEFT JOIN tb_user_role ur on ur.ur_u_id = u.userId
           LEFT JOIN tb_role r ON r.role_id = ur.ur_r_id
    ORDER BY u.userId, r.role_id
  </select>

  <delete id="removeUserAllRole">
    delete
    from tb_user_role
    where ur_u_id = #{userId}
  </delete>

  <insert id="batchAddUserRole">
    insert into tb_user_role
    (ur_u_id, ur_r_id) values
    <foreach collection="roleIds" item="i" separator=",">
      (#{userId},#{i})
    </foreach>
  </insert>

  <select id="getAllRoles" resultType="com.alibaba.fastjson.JSONObject">
    SELECT role_id        roleId,
           role_name roleName
    FROM tb_role
    WHERE delete_status = '1'
  </select>

  <insert id="addUser" useGeneratedKeys="true" keyProperty="userId">
    INSERT INTO tb_user
      (user_name, user_pwd, user_nickname)
    VALUES (#{username}, #{password}, #{nickname})
  </insert>

  <update id="updateUser">
    UPDATE tb_user
    SET
    user_nickname = #{nickname}
    <if test="password !='' and password !=null">
      , user_pwd = #{password}
    </if>
    , delete_status = #{deleteStatus}
    WHERE user_id = #{userId} and user_id != 10001
  </update>

  <select id="queryExistUsername" resultType="int">
    select count(0)
    from tb_user
    WHERE user_name = #{username}
      AND delete_status = '1';
  </select>
</mapper>