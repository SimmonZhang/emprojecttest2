<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo1.mapper.StaffMapper">
  <resultMap id="BaseResultMap" type="com.example.demo1.model.Staff">
    <id column="staff_id" jdbcType="VARCHAR" property="staffId" />
    <result column="staff_name" jdbcType="VARCHAR" property="staffName" />
    <result column="staff_sex" jdbcType="VARCHAR" property="staffSex" />
    <result column="staff_age" jdbcType="CHAR" property="staffAge" />
    <result column="staff_branch" jdbcType="VARCHAR" property="staffBranch" />
    <result column="staff_station" jdbcType="VARCHAR" property="staffStation" />
    <result column="staff_wage" jdbcType="VARCHAR" property="staffWage" />
    <result column="staff_tel" jdbcType="CHAR" property="staffTel" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    staff_id, staff_name, staff_sex, staff_age, staff_branch, staff_station, staff_wage, 
    staff_tel
  </sql>
  <select id="selectByExample" parameterType="com.example.demo1.model.StaffExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from tb_staff
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="offset != null and limit != null">
      limit ${offset},${limit}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_staff
    where staff_id = #{staffId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from tb_staff
    where staff_id = #{staffId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.example.demo1.model.Staff">
    insert into tb_staff (staff_id, staff_name, staff_sex, 
      staff_age, staff_branch, staff_station, 
      staff_wage, staff_tel)
    values (#{staffId,jdbcType=VARCHAR}, #{staffName,jdbcType=VARCHAR}, #{staffSex,jdbcType=VARCHAR}, 
      #{staffAge,jdbcType=CHAR}, #{staffBranch,jdbcType=VARCHAR}, #{staffStation,jdbcType=VARCHAR}, 
      #{staffWage,jdbcType=VARCHAR}, #{staffTel,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo1.model.Staff">
    insert into tb_staff
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="staffId != null">
        staff_id,
      </if>
      <if test="staffName != null">
        staff_name,
      </if>
      <if test="staffSex != null">
        staff_sex,
      </if>
      <if test="staffAge != null">
        staff_age,
      </if>
      <if test="staffBranch != null">
        staff_branch,
      </if>
      <if test="staffStation != null">
        staff_station,
      </if>
      <if test="staffWage != null">
        staff_wage,
      </if>
      <if test="staffTel != null">
        staff_tel,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="staffId != null">
        #{staffId,jdbcType=VARCHAR},
      </if>
      <if test="staffName != null">
        #{staffName,jdbcType=VARCHAR},
      </if>
      <if test="staffSex != null">
        #{staffSex,jdbcType=VARCHAR},
      </if>
      <if test="staffAge != null">
        #{staffAge,jdbcType=CHAR},
      </if>
      <if test="staffBranch != null">
        #{staffBranch,jdbcType=VARCHAR},
      </if>
      <if test="staffStation != null">
        #{staffStation,jdbcType=VARCHAR},
      </if>
      <if test="staffWage != null">
        #{staffWage,jdbcType=VARCHAR},
      </if>
      <if test="staffTel != null">
        #{staffTel,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo1.model.Staff">
    update tb_staff
    <set>
      <if test="staffName != null">
        staff_name = #{staffName,jdbcType=VARCHAR},
      </if>
      <if test="staffSex != null">
        staff_sex = #{staffSex,jdbcType=VARCHAR},
      </if>
      <if test="staffAge != null">
        staff_age = #{staffAge,jdbcType=CHAR},
      </if>
      <if test="staffBranch != null">
        staff_branch = #{staffBranch,jdbcType=VARCHAR},
      </if>
      <if test="staffStation != null">
        staff_station = #{staffStation,jdbcType=VARCHAR},
      </if>
      <if test="staffWage != null">
        staff_wage = #{staffWage,jdbcType=VARCHAR},
      </if>
      <if test="staffTel != null">
        staff_tel = #{staffTel,jdbcType=CHAR},
      </if>
    </set>
    where staff_id = #{staffId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo1.model.Staff">
    update tb_staff
    set staff_name = #{staffName,jdbcType=VARCHAR},
      staff_sex = #{staffSex,jdbcType=VARCHAR},
      staff_age = #{staffAge,jdbcType=CHAR},
      staff_branch = #{staffBranch,jdbcType=VARCHAR},
      staff_station = #{staffStation,jdbcType=VARCHAR},
      staff_wage = #{staffWage,jdbcType=VARCHAR},
      staff_tel = #{staffTel,jdbcType=CHAR}
    where staff_id = #{staffId,jdbcType=VARCHAR}
  </update>
</mapper>